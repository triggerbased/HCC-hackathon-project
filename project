from tkinter import Tk, Text, Button, Label, Toplevel
import random
import time
import threading

questions = 0
correct_answers = 0
timed_questions = 0
timed_correct_answers = 0
countdown = 300
qanda = {"abdominal aortic aneurysm": "pulsating feeling in the abdomen, back pain and abdominal pain",
"Bronchiectasis":"A persistant cough that usually  bring up phlegm, breathlessness",
"Dermatitis herpetiformis":"red, raised patches often with blisters that burst with scratching, itching and stining",
"Epilepsy":"Repeated seizures",
"Fibromyalgia":"Increased sensitivity to pain, fatique, muscle stiffness, headaches, difficulty sleeping",
"Gastroenteritis":"Sudden Watery Diarrhoea, feeling sick, vomiting, mild fever",
"Idiopathic pulmonary fibrosis":"Shortness of breath, persistant dry cough, tiredness, swollen fingertips",
"Anxiety Disorder":"Panic or anxiety attacks, physical anxiety responses, avoidance behaviour",
"Bipolar Disease Mania":"feeling extremely euphoric, going without sleep, aggression, irritability",
"Obsessive compulsive disorder":"Excessive need of respoding to compulsions, intrusive thoughts",
"Psychosis":"Confused thinking, delusion, hallucinations",
"Schizophrenia":"hallucinations, delusions, thought disorder, social withdrawl, blunted emotions",
"Pica":"Desire to consume non-edible items",
"Agoraphobia":"An intense fear of some environments, perception of no easy way to escape",
 "Dissocative Identity Disorder":"Multiple personalities and a loss of a sense of identity",
 "Ganser Syndrome":"Able to understand but provides crazy or inable to provide answers",
 "Dyslexia":"Difficulty spelling, writing and sounding out words",
 "Tourette's Syndrome":"Involuntary blinking, jittering, sniffing, throat clearing, etc.",
 "Agnosia":"Inability to comprehend objects even with inact senses",
 "Cyclothymia":"random symptoms of depression or elevated mood at times",
 "Insomnia":"Little if not no sleep, depression, low energy, irritability, sleepiness",
 "Dysthymia":"Low mood, low self-esteem, persistant periods of depression, low energy",
 "Nightmare disorder":"Repeated intense nightmares, nightmares threaten personal safety",
 "Dementia":"Memory loss, difficulty thinking, behavorial problems, descreased motivation",
 "Sexual Sadism":"Sexual arousal from other's pain, suffering or humiliation",
 "Dysmorphophobia":"Constant feeling that something is wrong or severly flawed about his/her body",
 "Gender Dysphoria":"An extreme dislike of his/her gender/sex",
 "Catatonia":"Immobility, mutism, withdrawl, low conciousness, staring, posturing",
 "Anorexia":"Low weight, overwhelming fear of weight gain, food restriction, body image disturbance ",
 "Kleptomania":"Constant urge and inability to avoid urge to steal",
 "Pedophillia":"Adult sexual attraction towards prepubescent children ",
 "Trichotillomania":"A strong and constant urge to pull out his/her hair",
 "Pyromania":"Constant strong urges to set things on fire",
 "Delirium":"Agitation, confusion, drowsiness, hallucinations delusion. ",
 "Abulia":"Inability to make decisions or take action",
 "Autogaphia":"Constant strong urges to hurt his/her body by biting or eating it",
 "Clausrophobia":"An intense fear of small, tight or confined environments",
 "Narcissistic personality disorder ":"Desire for attention, lack of empathy, entitlement",
         "Apraxia":"Loss of ability to preform gestures even with capability or desire to",
         "Whiplash":"Neck Stiffness, Headache, Dizziness, Shoulder and Back pain",
         "Tay-Sachs Disease":"Slowing of development, Dementia, Blindness, Seizures (in second year), Red spots on eyes",
         "Reye's Syndrome":"Reccurent Vomiting, Derilium, Listlessness, loss of conciousness",
         "Progressive Multifocal Leukoencephalopathy":"Clumsiness, Progressive weakness, Visual, Speech and personality changes, life-threatening disability",
         "Paroxysmal Hemicrania": "Red and tearing eyes, Drooping/Swollen eyelids, nasal congestion, pain",
         "Rasmussen's Encephalitis":"Frequent sever seizures, brain inflammation, mental deterioration",
         "Spinocerebellar Ataxias":"Progressive loss and lack of coordination and balance, slowing of movement"

}
game = None
timed = None

def new_regular_game(home):
  def func():
    #sets questions and answers
    global qanda
    global game
    #displays number of correct answers
    global correct_answers
    global questions

    index = random.randint(0, 45)
    index2 = random.randint(0, 45)
    index3 = random.randint(0, 45)
    print(index, index2, index3)
    i = random.choice([index, index2, index3])
    question = "A patient walks in with: " + list(qanda.values())[i]

    answer_option1 = list(qanda.keys())[index]
    answer_option2 = list(qanda.keys())[index2]
    answer_option3 = list(qanda.keys())[index3]

    #removes original window
    home.destroy()
    #makes and edits new window
    game = Tk()
    game.geometry("560x290")
    game.config(background="grey")
    #displays correct answer
    display_answers = Label(game, text= str(correct_answers) + "/" + str(questions))
    display_answers.config(background="grey", font= 9)
    display_answers.pack()
    #prints question
    question_text = Label(game, text=question, font=("Helvetica", 12), bg= "grey")
    question_text.pack()
    #makes button 1
    button1 = Button(game, text= answer_option1)
    button1.config(font=("Helvetica", 15, "bold"))
    button1.config(command= check_answer(display_answers, index, i, game))
    button1.place(relx=0.5, rely=0.6)
    button1.pack()
    #makes button 2
    button2 = Button(game, text= answer_option2)
    button2.config(font=("Helvetica", 15, "bold"))
    button2.config(command= check_answer(display_answers, index2, i, game))
    button2.place(relx=0.5, rely=0.8)
    button2.pack()
    #makes button 3
    button3 = Button(game, text= answer_option3)
    button3.config(font=("Helvetica", 15, "bold"))
    button3.config(command= check_answer(display_answers, index3, i, game))
    button3.place(relx=0.5, rely=1)
    button3.pack()
    #displays button to return to home screen
    button_home = Button(game, text="Home", command=  return_home(game))
    button_home.place(relx=0.5, rely = 10, anchor= "center")
    button_home.pack()
    #makes window
    game.mainloop()

  return func

#--------------------------------------------

def check_answer(display_answers, index, i, window):
  def func():
    global questions
    global game
    global correct_answers
    questions += 1
    if index == i:
      correct_answers += 1
    display_answers.config(text = str(correct_answers) + "/" + str(questions ))
    display_answers.pack()
    new_regular_game(game)()

  return func
#---------------------------------------------------------
def return_home(window):
  def func():
    window.destroy()
    home_screen()
  return func
#--------------------------------------------------------
def new_timed_game(home):
  def func():
    #sets questions and answers
    global qanda
    global timed
    global countdown
    #displays number of correct answers
    global timed_correct_answers
    global timed_questions
    def loop1():
      global countdown
      while countdown > 0:
        countdown -= 1
        print(countdown)
        time.sleep(1)
    
    def loop2():
      while countdown > 0:
      
        
        
        index = random.randint(0, 45)
        index2 = random.randint(0, 45)
        index3 = random.randint(0, 45)
        print(index, index2, index3)
        i = random.choice([index, index2, index3])
        question = "A patient walks in with: " + list(qanda.values())[i]
    
        answer_option1 = list(qanda.keys())[index]
        answer_option2 = list(qanda.keys())[index2]
        answer_option3 = list(qanda.keys())[index3]
    
        #removes original window
        home.destroy()
        #makes and edits new window
        timed = Tk()
        timed.geometry("560x290")
        timed.config(background="grey")
        #displays seconds remaining
        countdown_label = Label(timed, text= str(countdown))
        #displays correct answer
        display_answers = Label(timed, text= str(timed_correct_answers) + "/" + str(timed_questions))
        display_answers.config(background="grey", font= 9)
        display_answers.pack()
        #prints question
        question_text = Label(timed, text=question, font=("Helvetica", 12), bg= "grey")
        question_text.pack()
        #makes button 1
        button1 = Button(timed, text= answer_option1)
        button1.config(font=("Helvetica", 15, "bold"))
        button1.config(command= check_answer_timed(display_answers, index, i))
        button1.place(relx=0.5, rely=0.6)
        button1.pack()
        #makes button 2
        button2 = Button(timed, text= answer_option2)
        button2.config(font=("Helvetica", 15, "bold"))
        button2.config(command= check_answer_timed(display_answers, index2, i))
        button2.place(relx=0.5, rely=0.8)
        button2.pack()
        #makes button 3
        button3 = Button(timed, text= answer_option3)
        button3.config(font=("Helvetica", 15, "bold"))
        button3.config(command= check_answer_timed(display_answers, index3, i))
        button3.place(relx=0.5, rely=1)
        button3.pack()
        #displays button to return to home screen
        button_home = Button(timed, text="Home", command=  return_home(timed))
        button_home.place(relx=0.5, rely = 10, anchor= "center")
        button_home.pack()
        #makes window
        timed.mainloop()
      else:
        display_score = Label("You got: "+ str(timed_correct_answers) + "/" + str(timed_questions) + " questions correct! Returning to home in 10 seconds.")
        time.sleep(10)
        return_home(timed)

    thread1 = threading.Thread(target=loop1)
    thread2 = threading.Thread(target=loop2)

    thread2.start()
    thread1.start()
      
  return func

#--------------------------------------------

def check_answer_timed(display_answers, index, i):
  def func():
    global timed_questions
    global timed
    global timed_correct_answers
    timed_questions += 1
    if index == i:
      timed_correct_answers += 1
    display_answers.config(text = str(timed_correct_answers) + "/" + str(questions ))
    display_answers.pack()
    new_timed_game(timed)()

  return func

#--------------------------------------------------------
def how_to_play(home):
  def func():
    home.destroy()
    how_to_play_screen = Tk()
    how_to_play_screen.config(bg="grey")
    instructions = Label(how_to_play_screen, text="Everybody will present random symptoms \n you'll guess their condition between 3 options \n In timed, there'll also be a 5 minute timer \n Good luck! ", font=("Helvetica", 15, "bold"), bg= "grey")
    button_home = Button(how_to_play_screen, text="Home", command=  return_home(how_to_play_screen))
    button_home.place(relx=0.5, rely = 10, anchor= "center")
    button_home.pack()
    instructions.pack()
    how_to_play_screen.mainloop()
    
  return func
#--------------------------------------------------------
def home_screen():
  # makes a window and sets size and background
  home = Tk()
  home.geometry("560x290")
  home.config(background="grey")
  #Text
  title = Label(home, text= "Welcome to the diagnosing game!")
  title.config(font=("Helvetica", 21, "bold"), bg=("grey"))
  title.pack()
  # makes a button
  play_button = Button(home, text="PLAY INFINITE")
  play_button.pack()
  play_button.config(command = new_regular_game(home))
  play_button.config(font=("Helvetica", 30, "bold"))
  play_button.place(relx=0.5, rely=0.45, anchor= "center" )
  #play timed button
  timed_button = Button(home, text="PLAY TIMED", command= new_timed_game(home))
  timed_button.place(relx=0.5, rely=0.7, anchor= "center")
  timed_button.config(font= ("Helvetica", 30, "bold"))
  timed_button.pack()
  #How to play button
  how_to_play_button = Button(home, text="HOW TO PLAY", command= how_to_play(home))
  how_to_play_button.config(font= ("Helvetica", 20, "bold"))
  
  how_to_play_button.pack(side= "bottom")
  #adds window
  home.mainloop()
home_screen()
#-----------------------------------------------------


#-----------------------------------------------------
